//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRMS_Web.JobHistoryServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobHistoryData", Namespace="http://schemas.datacontract.org/2004/07/HRMS_Web.Services")]
    [System.SerializableAttribute()]
    public partial class JobHistoryData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable JobHistoryTableField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable JobHistoryTable {
            get {
                return this.JobHistoryTableField;
            }
            set {
                if ((object.ReferenceEquals(this.JobHistoryTableField, value) != true)) {
                    this.JobHistoryTableField = value;
                    this.RaisePropertyChanged("JobHistoryTable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JobHistoryServiceReference.IJobHistoryService")]
    public interface IJobHistoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobHistoryService/Get", ReplyAction="http://tempuri.org/IJobHistoryService/GetResponse")]
        HRMS_Web.JobHistoryServiceReference.JobHistoryData Get();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobHistoryService/Get", ReplyAction="http://tempuri.org/IJobHistoryService/GetResponse")]
        System.Threading.Tasks.Task<HRMS_Web.JobHistoryServiceReference.JobHistoryData> GetAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobHistoryService/Insert", ReplyAction="http://tempuri.org/IJobHistoryService/InsertResponse")]
        void Insert(string employee, string manager, string jobrole, string startdate, string enddate, string status, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobHistoryService/Insert", ReplyAction="http://tempuri.org/IJobHistoryService/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(string employee, string manager, string jobrole, string startdate, string enddate, string status, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobHistoryService/Update", ReplyAction="http://tempuri.org/IJobHistoryService/UpdateResponse")]
        void Update(int Id, string employee, string manager, string jobrole, string startdate, string enddate, string status, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobHistoryService/Update", ReplyAction="http://tempuri.org/IJobHistoryService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(int Id, string employee, string manager, string jobrole, string startdate, string enddate, string status, string comments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobHistoryService/Delete", ReplyAction="http://tempuri.org/IJobHistoryService/DeleteResponse")]
        void Delete(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJobHistoryService/Delete", ReplyAction="http://tempuri.org/IJobHistoryService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJobHistoryServiceChannel : HRMS_Web.JobHistoryServiceReference.IJobHistoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JobHistoryServiceClient : System.ServiceModel.ClientBase<HRMS_Web.JobHistoryServiceReference.IJobHistoryService>, HRMS_Web.JobHistoryServiceReference.IJobHistoryService {
        
        public JobHistoryServiceClient() {
        }
        
        public JobHistoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JobHistoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JobHistoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JobHistoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HRMS_Web.JobHistoryServiceReference.JobHistoryData Get() {
            return base.Channel.Get();
        }
        
        public System.Threading.Tasks.Task<HRMS_Web.JobHistoryServiceReference.JobHistoryData> GetAsync() {
            return base.Channel.GetAsync();
        }
        
        public void Insert(string employee, string manager, string jobrole, string startdate, string enddate, string status, string comments) {
            base.Channel.Insert(employee, manager, jobrole, startdate, enddate, status, comments);
        }
        
        public System.Threading.Tasks.Task InsertAsync(string employee, string manager, string jobrole, string startdate, string enddate, string status, string comments) {
            return base.Channel.InsertAsync(employee, manager, jobrole, startdate, enddate, status, comments);
        }
        
        public void Update(int Id, string employee, string manager, string jobrole, string startdate, string enddate, string status, string comments) {
            base.Channel.Update(Id, employee, manager, jobrole, startdate, enddate, status, comments);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(int Id, string employee, string manager, string jobrole, string startdate, string enddate, string status, string comments) {
            return base.Channel.UpdateAsync(Id, employee, manager, jobrole, startdate, enddate, status, comments);
        }
        
        public void Delete(int Id) {
            base.Channel.Delete(Id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int Id) {
            return base.Channel.DeleteAsync(Id);
        }
    }
}
